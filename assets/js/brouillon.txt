this.obstacles = numberOfObstacles;
console.log('obstacles');

for (let i = 0; i < this.obstacles; i++){

    let numberCell = randomNumber();
    let avaibleCell = $('td#'+numberCell);

    // Si la class de l'element courant n'est ni obstacle ni weapons
    if(!avaibleCell.hasClass('obstacle') && !avaibleCell.hasClass('weapons')) {
        $('td#'+numberCell).addClass("obstacle"); // On le génère
    } else {
        i--; // Sinon on enlève 1 à la variable de parcourt pour garder le même nombre de génération 
    }
    
} 

this.weapons = numberOfWeapons;
console.log('weapons');

for(let i = 0; i < this.weapons; i++) {

    let numberCell = randomNumber();
    let avaibleCell = $('td#'+numberCell);

    if(!avaibleCell.hasClass('obstacle') && !avaibleCell.hasClass('weapons')) {
        $('td#'+numberCell).addClass("weapons");
    } else {
        i--;
    } 
    
}

let tableOfObstacles = new Array();
let obstacleIsHere = "obstacle";
let weaponIsHere = "weapons";

$('TD').each(function() {
    if($(this).hasClass('obstacle')) {
        tableOfObstacles.push(obstacleIsHere);
    } else if ($(this).hasClass('weapons')) {
        tableOfObstacles.push(weaponIsHere);
    } else {
        tableOfObstacles.push("0");
    }
});

console.log('Plateau de jeu:', tableOfObstacles);

/*
for (let i = 0; i < this.obstacles; i++){
    let numberCell = randomNumber();
    $('td#'+numberCell).addClass("obstacle");
    this.position = false;
    cellsIndex.push(this.position);
    console.log(cellsIndex);
}


//fonction qui marche !
    generateObstacles() {

        this.obstacles = numberOfObstacles;
        let i = 0;
        do {
            let numberCell = randomNumber();
            let avaibleCell = $('td#'+numberCell);
            if(!avaibleCell.hasClass('obstacle') && !avaibleCell.hasClass('weapons')) {
                $('td#'+numberCell).addClass("obstacle") + i;
            } else {
                i--;
            }
            this.position = false;
            cellsIndex.push(this.position); 
            i++;
        } while (i < this.obstacles);

    }  



*/

    generateWeapons() {
        
        this.weapons = numberOfWeapons;
        let i = 0;
        do {
            i++;
            let numberCell = randomNumber();
            let avaibleCell = $('td#'+numberCell);
            if(!avaibleCell.hasClass('obstacle') && !avaibleCell.hasClass('weapons')) {
                $('td#'+numberCell).addClass("weapons");
                cellsWeapons[numberCell] = "false";
            } else {
                i--;
            }            
            console.log(cellsWeapons);

        } while (i < this.weapons);
    }  

    /*gameBoard.checkConfig();*/

    /*
    checkConfig() {
        let items = numberOfObstacles + numberOfWeapons;
        
        if(numberOfGameBox < items) {
            alert("la somme d'obstacles et d'armes doit etre inférieur au nombres de cellules");
            exit;
        }

    }
    */

    //this.firstPlayerPosition = firstPlayerPosition;
    //this.secondPlayerPosition = secondPlayerPosition;


            /////////////////////////////////////////////////////////////////////////////////////   ///////////////
        // -> Si Vrai                                                                           // -> Alors la case n'est pas dispo

        //console.log("isfree:", isfree);


        //etape 1 : ajout des skins

        //créer joueur 

        //gestion visuel joueur

        // créer arme pour chacun de joueurs

        // créer joueur + arme

        // Prévoir joueur et arme sur meme cellule
        // Le joueur commence avec une arme 
        // arme portée par id du player 
        // ancienne arme et nouvelle arme du joueur
        // puissance de degat egale à puissance de l'arme
        // anticipé joueur à une position + un nom + une puissance + une vie + un visuel
        // skin des armes par le biais d'une classe css
        // background url -> joueur -> via une classe -> pour la cellule //pas possible de remettre arme dessus
        // <span> avec la classe arme -> z-index 

        // génération des skin différents des armes
        // génération des joueur avec leur skin 
        // vérif sur cellule libre pour inserer joueur
        // verif cellule dispo ou pas 
        // crée arme de base -> meme position que le joueur -> insertion tableau armes
        // création de l'arme et du joueur
        // récupération dune nouvelle arme en remplacement de l'ancienne 

        // skin arme et obstcale OK
        // skin joueur  OK
        //


                    //let imageUrl = "assets/imgs/players/"+ playerSkin +".png";
            //this.skin = imageUrl;
            //element.css("background-image", "url(" + this.skin + ")"); 

                        //let imageUrl = "assets/imgs/players/"+ playerSkin +".png";
            //this.skin = imageUrl;
            //element.css("background-image", "url(" + this.skin + ")");  

                        //players.skinForThePlayer($( "td#"+playerIndex));
           // weapons.skinForTheWeapon($( "td#"+playerIndex), 0);
            //weapons.skinForTheWeapon($( "td#"+weaponIndex), id_weapon);


/*
.weapons {

    background-repeat: no-repeat;
    padding: 5px;
    /*margin: 0 auto;*/

}
*/
/*
.player {
    z-index: 1;
    background-repeat: no-repeat;
    position: relative;
}
*/

/*
skinForTheWeapon(element, random) {
    if(cellsWeapons.indexOf(Weapon)) {
        let imageUrl = "assets/imgs/weapons/"+ random +".png";
        this.skin = imageUrl;
        element.css("background-image", "url(" + this.skin + ")");
    } 
}*/

            //$( "td#"+playerIndex).addClass("player");
            //$( "td#"+weaponIndex).addClass("weaponRandom");


        let obstacleIsPossible0 = cellsObsctacles[0].position;
        let obstacleIsPossible1 = cellsObsctacles[1].position;
        let obstacleIsPossible2 = cellsObsctacles[2].position;
        let obstacleIsPossible3 = cellsObsctacles[3].position;
        let obstacleIsPossible4 = cellsObsctacles[4].position;
        let obstacleIsPossible5 = cellsObsctacles[5].position;
        let obstacleIsPossible6 = cellsObsctacles[6].position;
        let obstacleIsPossible7 = cellsObsctacles[7].position;
        let obstacleIsPossible8 = cellsObsctacles[8].position;
        let obstacleIsPossible9 = cellsObsctacles[9].position;
        let playerIsPossible = cellsPlayers;
        
        if (player1 - 10 == obstacleIsPossible0) {
            console.log('pas possible joueur1');
        } else if (player2 - 10 == obstacleIsPossible0) {
            console.log('pas possible joueur2');
        } 
        
        if (player1 - 10 == obstacleIsPossible1) {
            console.log('pas possible joueur1');
        } else if (player2 - 10 == obstacleIsPossible1) {
            console.log('pas possible joueur2');
        } 
        
        if (player1 - 10 == obstacleIsPossible2) {
            console.log('pas possible joueur1');
        } else if (player2 - 10 == obstacleIsPossible2) {
            console.log('pas possible joueur2');
        } 
        
        if (player1 - 10 == obstacleIsPossible3) {
            console.log('pas possible joueur1');
        } else if (player2 - 10 == obstacleIsPossible3) {
            console.log('pas possible joueur2');
        }
        
        if (player1 - 10 == obstacleIsPossible5) {
            console.log('pas possible joueur1');
        } else if (player2 - 10 == obstacleIsPossible5) {
            console.log('pas possible joueur2');
        }
        
        if (player1 - 10 == obstacleIsPossible6) {
            console.log('pas possible joueur1');
        } else if (player2 - 10 == obstacleIsPossible6) {
            console.log('pas possible joueur2');
        } 

        if (player1 - 10 == obstacleIsPossible7) {
            console.log('pas possible joueur1');
        } else if (player2 - 10 == obstacleIsPossible7) {
            console.log('pas possible joueur2');
        } 

        if (player1 - 10 == obstacleIsPossible8) {
            console.log('pas possible joueur1');
        } else if (player2 - 10 == obstacleIsPossible8) {
            console.log('pas possible joueur2');
        } 

        if (player1 - 10 == obstacleIsPossible9) {
            console.log('pas possible joueur1');
        } else if (player2 - 10 == obstacleIsPossible9) {
            console.log('pas possible joueur2');
        } 


        switch(index){
            case 0:
                player1 - 10 == cellsObsctacles[0].position;
                console.log('pas bon');
                player2 - 10 == cellsObsctacles[0].position;
                console.log('pas bon');
            break;
            case 1:
                player1 - 10 == cellsObsctacles[1].position;
                console.log('pas bon');
                player2 - 10 == cellsObsctacles[1].position;
                console.log('pas bon');
            break;
            case 2:
                player1 - 10 == cellsObsctacles[2].position;
                console.log('pas bon');
                player2 - 10 == cellsObsctacles[2].position;
                console.log('pas bon');
            break;
            case 3:
                player1 - 10 == cellsObsctacles[3].position;
                console.log('pas bon');
                player2 - 10 == cellsObsctacles[3].position;
                console.log('pas bon');
            break;
            case 4:
                player1 - 10 == cellsObsctacles[4].position;
                console.log('pas bon');
                player2 - 10 == cellsObsctacles[4].position;
                console.log('pas bon');
            break;
            case 5:
                player1 - 10 == cellsObsctacles[5].position;
                console.log('pas bon');
                player2 - 10 == cellsObsctacles[5].position;
                console.log('pas bon');
            break;
            default:
                console.log("RAS");
        }

                    switch(moves) {
                case player1 - 1 == indexObstacle:
                    console.log('pas bon');
                break;
                case player1 - 2 == indexObstacle:
                    console.log('pas bon');
                break;
                case player1 - 3 == indexObstacle:
                    console.log('pas bon');     
                break;        
                case player1 + 1 == indexObstacle:
                    console.log('pas bon');
                break;
                case player1 + 2 == indexObstacle:
                    console.log('pas bon');  
                break;   
                case player1 + 3 == indexObstacle:
                    console.log('pas bon');      
                break;   
                case player1 - 10 == indexObstacle:
                    console.log('pas bon');
                break;
                case player1 - 20 == indexObstacle:
                    console.log('pas bon');
                break;
                case player1 - 30 == indexObstacle:
                    console.log('pas bon');
                break;
                default:
                    console.log('OK');
            }

    moveIsPossible() {
        let player1 = cellsPlayers[0].position;
        let player2 = cellsPlayers[1].position;

        //détection des obstacles à proximité des joueurs
        for(let i = 0; i < numberOfObstacles; i++) {

            //let classObstacle = document.getElementsByClassName("obstacle");
            let indexObstacle = cellsObsctacles[i].position;
            let playerPosition;

            if (player1 - 1 != indexObstacle) {
                console.log('OK');
                let playerPosition = player1 - 1;
                console.log('position -1:', playerPosition);
                $("td#"+ player1).addClass("moveIsPossible");
                $("td#"+playerPosition).addClass("moveIsPossible");

            } else {
                
                if (player1 - 1 == indexObstacle){ 
                    console.log('pas bon');
                    playerPosition = player1 - 1;
                    $("td#"+playerPosition).removeClass("moveIsPossible");
                } else if (player1 - 2 == indexObstacle) {
                    console.log('pas bon');
                    playerPosition = player1 - 2;
                    $("td#"+playerPosition).removeClass("moveIsPossible");
                } else if (player1 - 3 == indexObstacle) {
                    console.log('pas bon');
                    playerPosition = player1 - 3;
                    $("td#"+playerPosition).removeClass("moveIsPossible");
                } else if (player1 + 1 == indexObstacle) {
                    console.log('pas bon');
                    playerPosition = player1 + 1;
                    $("td#"+playerPosition).removeClass("moveIsPossible");
                } else if (player1 + 2 == indexObstacle) {
                    console.log('pas bon');
                    playerPosition = player1 + 2;
                    $("td#"+playerPosition).removeClass("moveIsPossible");
                } else if (player1 + 3 == indexObstacle) {
                    console.log('pas bon');
                    playerPosition = player1 + 3;
                    $("td#"+playerPosition).removeClass("moveIsPossible");
                } else if(player1 - 10 == indexObstacle) {
                    console.log('pas bon');
                    playerPosition = player1 - 10;
                    $("td#"+playerPosition).removeClass("moveIsPossible");
                } else if (player1 - 20 == indexObstacle) {
                    console.log('pas bon');
                    playerPosition = player1 - 20;
                    $("td#"+playerPosition).removeClass("moveIsPossible");
                } else if (player1 - 30 == indexObstacle) {
                    console.log('pas bon');
                    playerPosition = player1 - 30;
                    $("td#"+playerPosition).removeClass("moveIsPossible");
                } else if (player1 + 10 == indexObstacle) {
                    console.log('pas bon');
                    playerPosition = player1 + 10;
                    $("td#"+playerPosition).removeClass("moveIsPossible");
                } else if (player1 + 20 == indexObstacle) {
                    console.log('pas bon');
                    playerPosition = player1 + 20;
                    $("td#"+playerPosition).removeClass("moveIsPossible");
                } else if (player1 + 30 == indexObstacle) {
                    console.log('pas bon');
                    playerPosition = player1 + 30;
                    $("td#"+playerPosition).removeClass("moveIsPossible");
                } 
            }


            if (player2 - 1 == indexObstacle) {
                console.log('pas bon');
            } else if (player2 - 2 == indexObstacle) {
                console.log('pas bon');
            } else if (player2 - 3 == indexObstacle) {
                console.log('pas bon');
            } else if (player2 + 1 == indexObstacle) {
                console.log('pas bon');
            } else if (player2 + 2 == indexObstacle) {
                console.log('pas bon');
            } else if (player2 + 3 == indexObstacle) {
                console.log('pas bon');
            } else if (player2 - 10 == indexObstacle) {
                console.log('pas bon');
            } else if (player2 - 20 == indexObstacle) {
                console.log('pas bon');
            } else if (player2 - 30 == indexObstacle) {
                console.log('pas bon');
            } else if (player2 + 10 == indexObstacle) {
                console.log('pas bon');
            } else if (player2 + 20 == indexObstacle) {
                console.log('pas bon');
            } else if (player2 + 30 == indexObstacle) {
                console.log('pas bon');
            } 

            //return indexObstacle;
            console.log('Obstacle :', indexObstacle);
            //console.log(cellsIndex);
            
            
        }
        
        

        //let obstacleIsPossible0 = cellsObsctacles[0].position;
    
        //for(let i = 0; i < numberOfObstacles; i++) {
            /*
            if(player1 - 10 == obstacle) {
                console.log('pas bon');
            } else if (player1 + 10 == obstacle) {
                console.log('pas bon');
            } */

            
             
            /*
            if (player2 - 10 == obstacle) {
                console.log('pas bon');
            } else if (player2 + 10 == obstacle) {
                console.log('pas bon');
            } */
            
    /*
    
    lorsque tu génères les positions de tes joueurs, juste après tu vérifies que le joueur 2 n'est pas sur le même x ou y que le joueur 1. Si c'est le cas tu contines à générer la position du joueur 2 (boucle while) jusqu'à ce que la condition soit vérifiée. Exemple :
    while (cellPlayer0.dataset.x === cellPlayer1.dataset.x || cellPlayer0.dataset.y === cellPlayer1.dataset.y) {
    cellPlayer1 = this.getRandomCell();
    }
        
    */
    
        
         
    }

    //player1
/* for(let i=0 ; i <= player1; i++) {
    console.log("i =", i);
    if(player1 % 2 == 0) {
        console.log("Player 1:", "Nombre pair");
    } else {
        console.log("Player 1:", "Nombre impair");
    }
}
*/

//player2
/*
if(player2 % 2 == 0) {
    console.log("Player 2:", "Nombre pair");
} else {
    console.log("Player 2:", "Nombre impair");
}

if(player2 % -2 == 0) {
    console.log("Player 2:", "Nombre pair");
} else {
    console.log("Player 2:", "Nombre impair");
}
*/

// note avant les vacances :
/*

- Exemple vérifier si la cellule 73 + 1 est disponible ?

- Le modulo vas etre utilisé pour la fonction de vérification 
    -> le modulo est absolument à voir 
    -> division pair ou impair => qui donne +1 ou -1

- Ajouter des paramètres de factorisation (pas de code non dynamique)

- varification de gauche à droite et de haut en bas

- Si on est sur la ligne courante :
    -> y'a t'il des armes ?
    -> y'a t'il des obstacles ?

- Ne pas vérifier + 100 cellules 

- si joueurs cote à cote = bon = alors combat
- si joueurs sur arme = bon  = alors remplacment de l'arme actuelle
- si obstcales = pas bon = on arrête 

*/


        return;

        //Déplacements vers la droite
        for (let i = 1; i <= numberMove; i++) {

            let line = positionPlayer1 % this.columns;
            let map_limit = (line + i) <= this.columns - 1;

            if(this.cellIsMovable(positionPlayer1 + i) && map_limit){
                let resultMove = positionPlayer1 + i;
                console.log("result déplacement droite joueur 1:", resultMove);
                $("td#"+resultMove).addClass("moveIsPossible");
            } else {
                break;
            }

        }

        //Déplacements vers la gauche 
        for (let i = 1; i <= numberMove; i++) {

            let line = positionPlayer1 % this.columns;

            if((positionPlayer1 - i) != opponentPlayer && this.obstacles.indexOf(positionPlayer1 - i) == -1 && (line - i) >= 0){
                let resultMove = positionPlayer1 - i;
                console.log("result déplacement gauche joueur 1:", resultMove);
                $("td#"+resultMove).addClass("moveIsPossible");
            } else {
                break;
            }

        }

        //Déplacements vers le bas 
        for (let i = this.columns; i <= 3 * this.columns; i += this.columns) {

            if((positionPlayer1 + i) != opponentPlayer && this.obstacles.indexOf(positionPlayer1 + i) == -1 && (positionPlayer1 + i) <= this.numberOfCell){
                let resultMove = positionPlayer1 + i;
                console.log("result déplacement gauche joueur 1:", resultMove);
                $("td#"+resultMove).addClass("moveIsPossible");
            } else {
                break;
            }

        }

        //déplacements vers le haut
        for(let i = this.columns; i <= 3 * this.columns; i += this.columns) {   

            if ((positionPlayer1 - i) != opponentPlayer && this.obstacles.indexOf(positionPlayer1 - i) == -1 && (positionPlayer1 - i) >= 0) {
                let resultMove = positionPlayer1 - i;
                console.log("result déplacement gauche joueur 1:", resultMove);
                $("td#"+resultMove).addClass("moveIsPossible");
            } else {
                break;
            }

        }

        //------------------------------------//
        //------------------------------------//

        //Mouvements Joueur 2
        console.log("-------------------------");
        //Déplacements vers la droite
        for (let i = 1; i <= 3; i++) {

            let line = positionPlayer2 % this.columns;

            if((positionPlayer2 + i) != opponentPlayer && this.obstacles.indexOf(positionPlayer2 + i) == -1 && (line + i) <= this.columns - 1){
                let resultMove = positionPlayer2 + i;
                console.log("result déplacement droite joueur 2:", resultMove);
                $("td#"+resultMove).addClass("moveIsPossible");
            } else {
                break;
            }

        }

        //Déplacements vers la gauche 
        for (let i = 1; i <= 3; i++) {

            let line = positionPlayer2 % this.columns;

            if((positionPlayer2 - i) != opponentPlayer && this.obstacles.indexOf(positionPlayer2 - i) == -1 && (line - i) >= 0){
                let resultMove = positionPlayer2 - i;
                console.log("result déplacement gauche joueur 2:", resultMove);
                $("td#"+resultMove).addClass("moveIsPossible");
            } else {
                break;
            }

        }

        //Déplacements vers le bas 
        for (let i = this.columns; i <= 3 * this.columns; i += this.columns) {

            if((positionPlayer2 + i) != opponentPlayer && this.obstacles.indexOf(positionPlayer2 + i) == -1 && (positionPlayer2 + i) <= this.numberOfCell){
                let resultMove = positionPlayer2 + i;
                console.log("result déplacement gauche joueur 2:", resultMove);
                $("td#"+resultMove).addClass("moveIsPossible");
            } else {
                break;
            }

        }

        //déplacements vers le haut
        for(let i = this.columns; i <= 3 * this.columns; i += this.columns) {   

            if ((positionPlayer2 - i) != opponentPlayer && this.obstacles.indexOf(positionPlayer2 - i) == -1 && (positionPlayer2 - i) >= 0) {
                let resultMove = positionPlayer2 - i;
                console.log("result déplacement gauche joueur 2:", resultMove);
                $("td#"+resultMove).addClass("moveIsPossible");
            } else {
                break;
            }

        }
        


        /* if(this.cellIsMovable(playerPosition + i) && map_limit){
                let resultMove = playerPosition + i;

                //Cette condition permet de mettre en couleur une case commune de déplacements que peuvent avoir les joueurs
                if(colorStep == "moveIsPossiblePlayer2" && $("td#"+resultMove).hasClass("moveIsPossiblePlayer1")) {
                    $("td#"+resultMove).removeClass("moveIsPossiblePlayer1");
                    $("td#"+resultMove).addClass("moveIsPossibleBothPlayer");
                } else {
                    $("td#"+resultMove).addClass(colorStep);
                }

            } else {
                break;
            }
        */

// RÃ©cupÃ¨re le nom des joueurs dans les input, teste si le champ est bien rempli et affiche les players
$(function () {
    $('#buttonname1').on("click", function () {
        if ($('#name1').val().length === 0) { // Si le joueur 1 n'a pas entrÃ© son pseudo
            $('#name1').css('border', '1px solid red');
            $('#pname1').text('Entrez votre nom !').css({
                'color': 'red',
                'font-weight': 'bold'
            });
        } else {
            $('#title-player1').replaceWith("<span id='title-player1'>" + $('#name1').val() + "</span>"); // Remplace player 1 par le nom du joueur
            $('#divname-player1').fadeOut("3000"); // Efface les input
            $('#name1').val(''); // Remets l'input Ã  "zÃ©ro"
            map.placePlayer1();
        }
    });
    $('#buttonname2').on("click", function () {
        if (($('#name2').val().length === 0) || ($('#title-player1').text() === $('#name2').val())) { // Si le joueur 2 n'a pas entrÃ© son pseudo ou si c'est le mÃªme que le joueur 1
            $('#name2').css('border', '1px solid red');
            $('#pname2').text('Entrez votre nom !').css({
                'color': 'red',
                'font-weight': 'bold'
            });
        } else {
            $('#title-player2').replaceWith("<span id='title-player2'>" + $('#name2').val() + "</span>");
            $('#divname-player2').fadeOut("3000");
            $('#name2').val('');
            map.placePlayer2();
            $('#instructions').html('Qui commence ? <button class="pf" id="pile">Pile</button> ou <button class="pf" id="face">Face</button>');
        }
    });
    $('#instructions').on("click", ".pf", function () {
        var pouf = $(this).attr('id'); // RÃ©cupÃ¨re le texte du bouton cliquÃ© : soit pile soit face
        map.quiCommence(pouf); // pouf : pour Pile OU Face 
        $('#instructions').fadeOut('2000'); // Efface les instructions en 2 secondes
        $('#instructions').text(''); // Supprime le code html
        $('#instructions').fadeIn('2000'); // Supprime le display: none
        $('#instructions').html('Utilisez les flÃ¨ches du clavier pour dÃ©placer les players</br><u>3 dÃ©placements possibles</u>');
    });    
});
